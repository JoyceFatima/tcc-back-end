import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

import { Business } from '../../entities/business/business.entity';
import { Dashboard } from '../../entities/dashboard/dashboard.entity';
import { GeminiService } from '../gemini/gemini.service';

import { DashboardDto } from './dto/dashboard.dto';

@Injectable()
export class DashboardService {
  private readonly logger = new Logger(DashboardService.name);

  constructor(
    @InjectRepository(Dashboard)
    private readonly dashboardRepository: Repository<Dashboard>,
    @InjectRepository(Business)
    private readonly businessRepository: Repository<Business>,
    private readonly geminiService: GeminiService,
  ) {}

  async getDashboardData(businessId: string): Promise<DashboardDto> {
    this.logger.log(`Fetching dashboard data for business ID: ${businessId}`);
    const dashboard = await this.dashboardRepository.findOne({
      where: { business: { id: businessId } },
      relations: [
        'business',
        'business.businessType',
        'business.targetAudience',
      ],
    });

    if (!dashboard) {
      this.logger.warn(
        `Dashboard for business with ID "${businessId}" not found`,
      );
      throw new NotFoundException(
        `Dashboard for business with ID "${businessId}" not found`,
      );
    }

    this.logger.log(`Dashboard data found for business ID: ${businessId}`);
    const business = dashboard.business;

    return {
      stats: dashboard.stats,
      locationAnalysis: dashboard.locationAnalysis,
      insights: dashboard.insights,
      businessInfo: {
        name: business.name,
        type: business.businessType.name,
        address: business.address,
        targetAudience: business.targetAudience.name,
      },
    };
  }

  async generateDashboardData(businessId: string): Promise<Dashboard> {
    this.logger.log(`Generating dashboard data for business ID: ${businessId}`);

    const business = await this.businessRepository.findOne({
      where: { id: businessId },
      relations: ['businessType', 'targetAudience'],
    });

    if (!business) {
      this.logger.warn(`Business with ID "${businessId}" not found`);
      throw new NotFoundException(`Business with ID "${businessId}" not found`);
    }
    this.logger.log(`Found business: ${business.name}`);

    const generatedData =
      await this.geminiService.generateDashboardData(business);
    this.logger.log('Data generated by Gemini');

    let dashboard = await this.dashboardRepository.findOne({
      where: { business: { id: businessId } },
    });

    if (dashboard) {
      this.logger.log('Existing dashboard found, updating...');
      dashboard.stats = generatedData.stats;
      dashboard.locationAnalysis = generatedData.locationAnalysis;
      dashboard.insights = generatedData.insights;
    } else {
      this.logger.log('No existing dashboard, creating new one...');
      dashboard = this.dashboardRepository.create({
        stats: generatedData.stats,
        locationAnalysis: generatedData.locationAnalysis,
        insights: generatedData.insights,
        business: business,
      });
    }

    this.logger.log(`Saving dashboard data...`);
    const savedDashboard = await this.dashboardRepository.save(dashboard);
    this.logger.log('Dashboard data saved successfully');

    return savedDashboard;
  }
}
